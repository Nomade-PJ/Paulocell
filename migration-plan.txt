# Plano de Migração: LocalStorage para Armazenamento no Servidor

## Objetivo
Substituir o uso de localStorage por armazenamento de dados no servidor, permitindo sincronização em diversos dispositivos e maior segurança dos dados.

## Etapas Implementadas

1. ✅ Criado componente `SyncStatus.jsx`
   - Exibe status de sincronização
   - Permite sincronização manual

2. ✅ Modificado `Customers.tsx`
   - Substituído acesso direto ao localStorage pelo hook `useServerData`
   - Adicionada exibição de indicador de carregamento
   - Adicionado tratamento de erros

3. ✅ Modificado `CustomerForm.tsx`
   - Substituído salvamento direto no localStorage pelo método `saveItem` do `useServerData`
   - Mantido fallback para localStorage quando offline

## Próximas Etapas

4. Modificar arquivos relacionados a dispositivos
   - `Devices.tsx`
   - `NewDevice.tsx`
   - `EditDevice.tsx`
   - `DeviceDetail.tsx`

5. Modificar arquivos relacionados a serviços
   - `Services.tsx`
   - `NewService.tsx`
   - `EditService.tsx`
   - `ServiceDetail.tsx`

6. Modificar arquivos relacionados a documentos
   - `Documents.tsx`
   - `DocumentForm.tsx`
   - `EditDocumentForm.tsx`

7. Modificar arquivos relacionados a inventário
   - `Inventory.tsx`
   - `NewInventoryItem.tsx`
   - `EditInventoryItem.tsx`

8. Atualizar serviços e hooks para lidar com relacionamentos
   - Garantir que relacionamentos entre entidades sejam mantidos
   - Implementar controle de versão e detecção de conflitos

9. Verificar autenticação e autorização
   - Melhorar sistema de login para usar JWT ou similar
   - Implementar controle de acesso baseado em funções

10. Testes e validação
    - Testar fluxos offline e online
    - Validar sincronização em diferentes dispositivos
    - Verificar desempenho e latência

11. Implementação no servidor
    - Configurar ambiente de produção
    - Configurar banco de dados
    - Configurar backup e recuperação

## Arquitetura Atual

- Hook `useServerData`: Gerencia comunicação com o servidor
- Serviço `userDataService`: Implementa operações CRUD para dados do usuário
- Componente `SyncStatus`: Exibe status da sincronização

## Ambiente

- Backend: Express.js rodando na porta 3000
- Armazenamento: Banco de dados simulado em memória
- API: Endpoints RESTful em /api/user-data/:userId/:collection/:key

## Observações

- A migração está sendo implementada gradualmente
- Cada componente é atualizado para usar o novo método
- O localStorage é mantido como fallback para operações offline
- Os dados são sincronizados automaticamente quando a conexão é restabelecida 