// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id        Int       @id @default(autoincrement())
  name      String
  phone     String?
  email     String?
  address   String?
  services  Service[]
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  @@map("customers")
}

model Service {
  id          Int        @id @default(autoincrement())
  customerId  Int        @map("customer_id")
  customer    Customer   @relation(fields: [customerId], references: [id], onDelete: Cascade)
  device      String
  problem     String?
  status      String     @default("pending")
  price       Float?
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  serviceItems ServiceItem[]

  @@index([customerId], name: "service_customer_id_idx")
  @@map("services")
}

model ServiceItem {
  id          Int      @id @default(autoincrement())
  serviceId   Int      @map("service_id")
  description String
  quantity    Int      @default(1)
  price       Float
  createdAt   DateTime @default(now()) @map("created_at")
  service     Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@index([serviceId], name: "service_item_service_id_idx")
  @@map("service_items")
}

model InventoryItem {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  quantity    Int      @default(0)
  minQuantity Int      @default(5) @map("min_quantity")
  price       Float?
  category    String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("inventory_items")
}

model User {
  id        Int       @id @default(autoincrement())
  username  String    @unique
  name      String
  role      String    @default("user")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  keywords  Keyword[]
  tokens    Token[]

  @@map("users")
}

model Keyword {
  id        Int      @id @default(autoincrement())
  hash      String   @unique
  userId    Int      @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], name: "keyword_user_id_idx")
  @@map("keywords")
}

model Token {
  id           Int      @id @default(autoincrement())
  userId       Int      @map("user_id")
  tokenType    String   @map("token_type")
  tokenValue   String   @unique @map("token_value")
  expiresAt    DateTime @map("expires_at")
  refreshToken String?  @unique @map("refresh_token")
  sessionId    String?  @map("session_id")
  createdAt    DateTime @default(now()) @map("created_at")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], name: "token_user_id_idx")
  @@index([tokenValue], name: "token_value_idx")
  @@index([refreshToken], name: "refresh_token_idx")
  @@map("tokens")
}